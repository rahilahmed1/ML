import numpy as np
x=np.array(([2,9],[1,5],[3,6]),dtype=float)
y=np.array(([92],[86],[89]),dtype=float)
y=y/100

#sigmoid Function
def sigmoid(x):
    return 1/(1+np.exp(-x))

#Derative of Sigmoid Function
def derivatives_sigmoid(x):
    return x*(1-x)

#variable initialization
epoch=10000               #setting training iteration
lr=0.1                    #setting learnibg rate
inputlayer_neurons=2      #setting of features in data set
hiddenlayer_neurons=3    #setting of hidden layers neurons
output_neurons=1          #number of neurons at output layer

#weight and bias initialization
wh=np.random.uniform(size=(inputlayer_neurons,hiddenlayer_neurons))
bh=np.random.uniform(size=(1,hiddenlayer_neurons))

wout=np.random.uniform(size=(hiddenlayer_neurons,output_neurons))
bout=np.random.uniform(size=(1,output_neurons))

#draws a random range of numbers uniformly for dimension
for i in range(epoch):
    #Forward Propagation
    hinp1=np.dot(x,wh)
    hinp=hinp1+bh
    hlayer_act=sigmoid(hinp)
    outinp1=np.dot(hlayer_act,wout)
    outinp=outinp1+bout
    output=sigmoid(outinp)
    
    #Back Propagation
    EO=y-output
    outgrad=derivatives_sigmoid(output)
    d_output=EO*outgrad
    EH=d_output.dot(wout.T)
    hiddengrad=derivatives_sigmoid(hlayer_act)
    #how much hidden layer wrt contribution of error
    d_hiddenlayer=EH*hiddengrad
    wout+=hlayer_act.T.dot(d_output)*lr
    #dotproduct of the nextlayererror and currentlayerop
    bout+=np.sum(d_output,axis=0,keepdims=True)*lr
    wh+=x.T.dot(d_hiddenlayer)*lr
    bh+=np.sum(d_hiddenlayer,axis=0,keepdims=True)*lr
    
print("Input:\n"+str(x))
print("Actual Output:\n"+str(y))
print("Predicted Output:\n",output)
    
    
OUTPUT:
Input:
[[2. 9.]
 [1. 5.]
 [3. 6.]]
Actual Output:
[[0.92]
 [0.86]
 [0.89]]
Predicted Output:
 [[0.89215214]
 [0.88405256]
 [0.89284104]]

2)
Input:
[[2. 9.]
 [1. 5.]
 [3. 6.]]
Actual Output:
[[0.92]
 [0.86]
 [0.89]]
Predicted Output:
 [[0.895875  ]
 [0.88154858]
 [0.89140985]]

3)
Input:
[[2. 9.]
 [1. 5.]
 [3. 6.]]
Actual Output:
[[0.92]
 [0.86]
 [0.89]]
Predicted Output:
 [[0.89379393]
 [0.87794381]
 [0.89683363]]